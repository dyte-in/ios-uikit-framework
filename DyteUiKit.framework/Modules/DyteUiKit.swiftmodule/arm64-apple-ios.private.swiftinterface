// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DyteUiKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import DyteUiKit
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class ImageProvider {
  public static func image(named: Swift.String) -> UIKit.UIImage?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FileDownloader {
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init?(hex: Swift.String)
}
extension UIKit.UIColor {
  public func lighter(by percentage: CoreFoundation.CGFloat = 12.0) -> Self?
  public func darker(by percentage: CoreFoundation.CGFloat = 12.0) -> UIKit.UIColor?
}
@_hasMissingDesignatedInitializers public class KeyboardObserver {
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func addSubViews(_ views: UIKit.UIView...)
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
}
extension UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) public func addArrangedSubviews(_ views: UIKit.UIView...)
  @_Concurrency.MainActor(unsafe) public func removeFully(view: UIKit.UIView)
}
@nonobjc extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func add(_ child: UIKit.UIViewController, frame: CoreFoundation.CGRect? = nil)
  @_Concurrency.MainActor(unsafe) public func remove()
}
@objc public class ConstraintCreator : ObjectiveC.NSObject {
  public init(constraints: [DyteUiKit.ConstraintCreator.Constraint])
  public enum ConstraintType {
    case top
    case bottom
    case leading
    case trailing
    case width
    case height
    case centerX
    case centerY
    case aspectRatio
    public static func == (a: DyteUiKit.ConstraintCreator.ConstraintType, b: DyteUiKit.ConstraintCreator.ConstraintType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Constraint {
    case equate(viewAttribute: UIKit.NSLayoutConstraint.Attribute, toView: UIKit.UIView, toViewAttribute: UIKit.NSLayoutConstraint.Attribute, relation: UIKit.NSLayoutConstraint.Relation, constant: CoreFoundation.CGFloat, multiplier: CoreFoundation.CGFloat)
    case height(view: UIKit.UIView?, relation: UIKit.NSLayoutConstraint.Relation, constant: CoreFoundation.CGFloat, multiplier: CoreFoundation.CGFloat)
    case width(view: UIKit.UIView?, relation: UIKit.NSLayoutConstraint.Relation, constant: CoreFoundation.CGFloat, multiplier: CoreFoundation.CGFloat)
    case top(view: UIKit.UIView, constant: CoreFoundation.CGFloat, relation: UIKit.NSLayoutConstraint.Relation, multiplier: CoreFoundation.CGFloat)
    case bottom(view: UIKit.UIView, constant: CoreFoundation.CGFloat, relation: UIKit.NSLayoutConstraint.Relation, multiplier: CoreFoundation.CGFloat)
    case leading(view: UIKit.UIView, constant: CoreFoundation.CGFloat, relation: UIKit.NSLayoutConstraint.Relation, multiplier: CoreFoundation.CGFloat)
    case trailing(view: UIKit.UIView, constant: CoreFoundation.CGFloat, relation: UIKit.NSLayoutConstraint.Relation, multiplier: CoreFoundation.CGFloat)
    case before(view: UIKit.UIView, constant: CoreFoundation.CGFloat, relation: UIKit.NSLayoutConstraint.Relation, multiplier: CoreFoundation.CGFloat)
    case after(view: UIKit.UIView, constant: CoreFoundation.CGFloat, relation: UIKit.NSLayoutConstraint.Relation, multiplier: CoreFoundation.CGFloat)
    case above(view: UIKit.UIView, constant: CoreFoundation.CGFloat, relation: UIKit.NSLayoutConstraint.Relation, multiplier: CoreFoundation.CGFloat)
    case below(view: UIKit.UIView, constant: CoreFoundation.CGFloat, relation: UIKit.NSLayoutConstraint.Relation, multiplier: CoreFoundation.CGFloat)
    case centerX(view: UIKit.UIView, constant: CoreFoundation.CGFloat, multiplier: CoreFoundation.CGFloat)
    case centerY(view: UIKit.UIView, constant: CoreFoundation.CGFloat, multiplier: CoreFoundation.CGFloat)
    case aspectRatio(ratio: CoreFoundation.CGFloat)
  }
  public static func equateAttribute(_ attribute: UIKit.NSLayoutConstraint.Attribute, toView view: UIKit.UIView, toAttribute: UIKit.NSLayoutConstraint.Attribute, withRelation relation: UIKit.NSLayoutConstraint.Relation, _ constant: CoreFoundation.CGFloat = 0, multiplier: CoreFoundation.CGFloat = 1) -> DyteUiKit.ConstraintCreator
  public static func height(_ constant: CoreFoundation.CGFloat, _ relation: UIKit.NSLayoutConstraint.Relation = .equal, multiplier: CoreFoundation.CGFloat = 1) -> DyteUiKit.ConstraintCreator
  public static func width(_ constant: CoreFoundation.CGFloat, _ relation: UIKit.NSLayoutConstraint.Relation = .equal, multiplier: CoreFoundation.CGFloat = 1) -> DyteUiKit.ConstraintCreator
  public static func top(_ view: UIKit.UIView, _ constant: CoreFoundation.CGFloat = 0, _ relation: UIKit.NSLayoutConstraint.Relation = .equal, multiplier: CoreFoundation.CGFloat = 1) -> DyteUiKit.ConstraintCreator
  public static func bottom(_ view: UIKit.UIView, _ constant: CoreFoundation.CGFloat = 0, _ relation: UIKit.NSLayoutConstraint.Relation = .equal, multiplier: CoreFoundation.CGFloat = 1) -> DyteUiKit.ConstraintCreator
  public static func leading(_ view: UIKit.UIView, _ constant: CoreFoundation.CGFloat = 0, _ relation: UIKit.NSLayoutConstraint.Relation = .equal, multiplier: CoreFoundation.CGFloat = 1) -> DyteUiKit.ConstraintCreator
  public static func trailing(_ view: UIKit.UIView, _ constant: CoreFoundation.CGFloat = 0, _ relation: UIKit.NSLayoutConstraint.Relation = .equal, multiplier: CoreFoundation.CGFloat = 1) -> DyteUiKit.ConstraintCreator
  public static func before(_ view: UIKit.UIView, _ constant: CoreFoundation.CGFloat = 0, _ relation: UIKit.NSLayoutConstraint.Relation = .equal, multiplier: CoreFoundation.CGFloat = 1) -> DyteUiKit.ConstraintCreator
  public static func after(_ view: UIKit.UIView, _ constant: CoreFoundation.CGFloat = 0, _ relation: UIKit.NSLayoutConstraint.Relation = .equal, multiplier: CoreFoundation.CGFloat = 1) -> DyteUiKit.ConstraintCreator
  public static func above(_ view: UIKit.UIView, _ constant: CoreFoundation.CGFloat = 0, _ relation: UIKit.NSLayoutConstraint.Relation = .equal, multiplier: CoreFoundation.CGFloat = 1) -> DyteUiKit.ConstraintCreator
  public static func below(_ view: UIKit.UIView, _ constant: CoreFoundation.CGFloat = 0, _ relation: UIKit.NSLayoutConstraint.Relation = .equal, multiplier: CoreFoundation.CGFloat = 1) -> DyteUiKit.ConstraintCreator
  public static func centerX(_ view: UIKit.UIView, _ constant: CoreFoundation.CGFloat = 0, multiplier: CoreFoundation.CGFloat = 1) -> DyteUiKit.ConstraintCreator
  public static func centerY(_ view: UIKit.UIView, _ constant: CoreFoundation.CGFloat = 0, _ priority: UIKit.UILayoutPriority = .required, _ relation: UIKit.NSLayoutConstraint.Relation = .equal, multiplier: CoreFoundation.CGFloat = 1) -> DyteUiKit.ConstraintCreator
  public static func centerView(_ view: UIKit.UIView) -> DyteUiKit.ConstraintCreator
  public static func size(_ width: CoreFoundation.CGFloat, _ height: CoreFoundation.CGFloat) -> DyteUiKit.ConstraintCreator
  public static func size(_ size: CoreFoundation.CGSize) -> DyteUiKit.ConstraintCreator
  public static func sameLeadingTrailing(_ view: UIKit.UIView, _ constant: CoreFoundation.CGFloat = 0) -> DyteUiKit.ConstraintCreator
  public static func sameTopBottom(_ view: UIKit.UIView, _ constant: CoreFoundation.CGFloat = 0, _ relation: UIKit.NSLayoutConstraint.Relation = .equal) -> DyteUiKit.ConstraintCreator
  public static func fillSuperView(_ view: UIKit.UIView, _ top: CoreFoundation.CGFloat?, left: CoreFoundation.CGFloat?, bottom: CoreFoundation.CGFloat?, right: CoreFoundation.CGFloat?) -> DyteUiKit.ConstraintCreator
  public static func fillSuperView(_ view: UIKit.UIView, _ constant: CoreFoundation.CGFloat = 0) -> DyteUiKit.ConstraintCreator
  public static func aspectRatio(_ value: CoreFoundation.CGFloat) -> DyteUiKit.ConstraintCreator
  @objc deinit
}
extension UIKit.UIView {
  public struct AssociatedKeys {
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func set(_ constraints: DyteUiKit.ConstraintCreator...)
  @_Concurrency.MainActor(unsafe) public func get(_ constraint: DyteUiKit.ConstraintCreator.ConstraintType) -> UIKit.NSLayoutConstraint?
}
final public class ObjectAssociation<T> where T : AnyObject {
  public init(policy: ObjectiveC.objc_AssociationPolicy = .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
  final public func get(index: Swift.AnyObject, key: inout Swift.String) -> T?
  final public func set(index: Swift.AnyObject, key: inout Swift.String, newValue: T?)
  @objc deinit
}
extension DyteUiKit.ConstraintCreator.ConstraintType : Swift.Equatable {}
extension DyteUiKit.ConstraintCreator.ConstraintType : Swift.Hashable {}
